/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    blogs: Blog;
    'booking-forms': BookingForm;
    'contact-forms': ContactForm;
    'donation-forms': DonationForm;
    'hero-banners': HeroBanner;
    'in-kind-support-forms': InKindSupportForm;
    'job-posts': JobPost;
    media: Media;
    merchandise: Merchandise;
    pages: Page;
    partners: Partner;
    users: User;
    'youtube-embeds': YoutubeEmbed;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'booking-forms': BookingFormsSelect<false> | BookingFormsSelect<true>;
    'contact-forms': ContactFormsSelect<false> | ContactFormsSelect<true>;
    'donation-forms': DonationFormsSelect<false> | DonationFormsSelect<true>;
    'hero-banners': HeroBannersSelect<false> | HeroBannersSelect<true>;
    'in-kind-support-forms': InKindSupportFormsSelect<false> | InKindSupportFormsSelect<true>;
    'job-posts': JobPostsSelect<false> | JobPostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    merchandise: MerchandiseSelect<false> | MerchandiseSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    partners: PartnersSelect<false> | PartnersSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'youtube-embeds': YoutubeEmbedsSelect<false> | YoutubeEmbedsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'vi';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Blog posts and articles for the website
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  /**
   * The title of the blog post
   */
  title: string;
  /**
   * Author of the blog post
   */
  author?: (number | null) | User;
  /**
   * Select the category for this blog post
   */
  category: 'taste-the-story' | 'jimmys-letters' | 'jimmys-bio' | 'behind-the-bar' | 'her-turn' | 'koto-foundation';
  /**
   * Publication status of the blog post
   */
  status: 'draft' | 'review' | 'published' | 'archived';
  /**
   * Header image for the blog post
   */
  header_image?: (number | null) | Media;
  /**
   * The main content of the blog post. Use the + button to add images and the relationship button to insert YouTube videos at any position.
   */
  paragraph: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add a gallery of images to display with the blog post
   */
  gallery?:
    | {
        /**
         * Gallery images with captions and alt text
         */
        images?:
          | {
              /**
               * Select an image for the gallery
               */
              image: number | Media;
              /**
               * Optional caption for this image
               */
              caption?: string | null;
              /**
               * Alt text for accessibility
               */
              alt?: string | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Choose how the gallery images should be displayed
         */
        layout?: ('grid' | 'masonry' | 'carousel') | null;
        /**
         * Number of columns for grid layout
         */
        columns?: ('2' | '3' | '4' | '5') | null;
        /**
         * Display captions below images
         */
        showCaptions?: boolean | null;
        /**
         * Allow clicking images to view in lightbox
         */
        enableLightbox?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Date when the blog post was uploaded
   */
  upload_date: string;
  /**
   * Date when the blog post was published to the public
   */
  publishedAt?: string | null;
  /**
   * URL-friendly version of the title. Auto-generated from title but can be edited manually.
   */
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Brief description for SEO purposes
   */
  meta_description?: string | null;
  /**
   * Meta title for SEO purposes
   */
  meta_title?: string | null;
  /**
   * Mark this blog post as featured
   */
  featured?: boolean | null;
  /**
   * Tags for categorizing and searching
   */
  tags?: string[] | null;
  meta?: {
    title?: string | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * User accounts and authentication
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  /**
   * User role determines what actions they can perform
   */
  role: 'admin' | 'editor' | 'author' | 'viewer';
  /**
   * Whether the user account is active
   */
  active?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Images, videos, and other media files
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility
   */
  alt?: string | null;
  /**
   * Caption or description for the media
   */
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * User who uploaded this media
   */
  uploadedBy?: (number | null) | User;
  /**
   * Category to help organize media files
   */
  category?: ('blog-images' | 'profiles' | 'marketing' | 'documents' | 'other' | 'hero-banners') | null;
  /**
   * Whether this media is publicly accessible
   */
  isPublic?: boolean | null;
  /**
   * Folder path for organizing media files
   */
  folder?: string | null;
  /**
   * Parent folder relationship (preserved for compatibility)
   */
  folders_id?: (number | null) | Media;
  /**
   * Photographer metadata
   */
  metadata_photographer?: string | null;
  /**
   * Copyright metadata
   */
  metadata_copyright?: string | null;
  /**
   * License metadata
   */
  metadata_license?: string | null;
  /**
   * Hero size URL
   */
  sizes_hero_url?: string | null;
  /**
   * Hero size width
   */
  sizes_hero_width?: number | null;
  /**
   * Hero size height
   */
  sizes_hero_height?: number | null;
  /**
   * Hero size MIME type
   */
  sizes_hero_mime_type?: string | null;
  /**
   * Hero size file size
   */
  sizes_hero_filesize?: number | null;
  /**
   * Hero size filename
   */
  sizes_hero_filename?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Restaurant reservation bookings and table management
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "booking-forms".
 */
export interface BookingForm {
  id: number;
  /**
   * Full name of the person making the reservation
   */
  fullName: string;
  /**
   * Email address for reservation confirmation
   */
  email: string;
  /**
   * Phone number for contact regarding the reservation
   */
  phoneNumber: string;
  /**
   * Nationality of the person making the reservation
   */
  nationality: string;
  /**
   * Restaurant location for the reservation
   */
  restaurant: string;
  /**
   * Date of the reservation
   */
  reservationDate: string;
  /**
   * Preferred reservation time
   */
  reservationTime: string;
  /**
   * Number of guests for the reservation
   */
  numberOfGuests: string;
  /**
   * Is this a special occasion?
   */
  specialOccasion?: string | null;
  /**
   * Type of special occasion (if applicable)
   */
  specialOccasionType?: string | null;
  /**
   * Any special requests or dietary requirements
   */
  specialRequests?: string | null;
  /**
   * Status of the reservation
   */
  status: 'pending' | 'confirmed' | 'seated' | 'completed' | 'cancelled' | 'no-show';
  /**
   * Reservation confirmation number
   */
  confirmationNumber?: string | null;
  /**
   * Internal notes about this reservation
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Contact form submissions from website visitors
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-forms".
 */
export interface ContactForm {
  id: number;
  /**
   * Full name of the person submitting the form
   */
  fullName: string;
  /**
   * Email address of the person submitting the form
   */
  email: string;
  /**
   * Message content from the contact form
   */
  message: string;
  /**
   * Status of the contact form submission
   */
  status: 'new' | 'in-progress' | 'replied' | 'closed';
  /**
   * Internal notes about this submission
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Donation form submissions and payment tracking
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "donation-forms".
 */
export interface DonationForm {
  id: number;
  /**
   * Full name of the donor
   */
  fullName: string;
  /**
   * Email address of the donor
   */
  email: string;
  /**
   * Donation amount in dollars
   */
  donationAmount: string;
  /**
   * Preferred payment method
   */
  paymentMethod: string;
  /**
   * How did you hear about our cause?
   */
  howDidYouHearAboutUs: string;
  /**
   * Status of the donation
   */
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'refunded';
  /**
   * Payment transaction ID (if applicable)
   */
  transactionId?: string | null;
  /**
   * Internal notes about this donation
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Hero banner content for website homepage and landing pages
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero-banners".
 */
export interface HeroBanner {
  id: number;
  /**
   * The main title of the hero banner
   */
  title: string;
  /**
   * A short tagline or subtitle for the hero banner
   */
  tagline?: string | null;
  /**
   * Detailed description or content for the hero banner
   */
  description?: string | null;
  /**
   * Button text (e.g., Apply, Register, Learn More)
   */
  button?: string | null;
  /**
   * URL for the button link
   */
  buttonLink?: string | null;
  /**
   * Hero banner background image
   */
  image: number | Media;
  /**
   * Hero banner status
   */
  status: 'active' | 'inactive' | 'draft';
  /**
   * User who created this hero banner
   */
  createdBy?: (number | null) | User;
  /**
   * Feature this hero banner prominently
   */
  featured?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * In-kind support and donation offers
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "in-kind-support-forms".
 */
export interface InKindSupportForm {
  id: number;
  /**
   * Full name of the person offering in-kind support
   */
  fullName: string;
  /**
   * Email address of the person offering in-kind support
   */
  email: string;
  /**
   * Phone number for contact
   */
  phoneNumber: string;
  /**
   * Preferred delivery or pickup method
   */
  deliveryPreference: string;
  /**
   * Details about the in-kind support being offered
   */
  message: string;
  /**
   * Status of the in-kind support request
   */
  status: 'new' | 'contacted' | 'arranged' | 'completed' | 'declined';
  /**
   * Type of item or service being offered
   */
  itemType?: string | null;
  /**
   * Estimated value of the in-kind donation (if applicable)
   */
  estimatedValue?: string | null;
  /**
   * Internal notes about this in-kind support request
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Job postings and career opportunities
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-posts".
 */
export interface JobPost {
  id: number;
  /**
   * Job title
   */
  title: string;
  /**
   * Job location (e.g., "Remote", "New York, NY", "London, UK")
   */
  location: string;
  /**
   * Brief summary for job listing display
   */
  summary: string;
  /**
   * Detailed job description with rich content (requirements, benefits, etc.)
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Date when the job post was published to the public
   */
  publishedAt?: string | null;
  /**
   * Current status of the job post
   */
  status: 'draft' | 'published';
  /**
   * Header image for the job post
   */
  header_image?: (number | null) | Media;
  /**
   * URL-friendly version of the job title. Auto-generated from title but can be edited manually.
   */
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Merchandise and product catalog
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merchandise".
 */
export interface Merchandise {
  id: number;
  /**
   * Tên tổ chức (để grouping vào đúng nhóm trên trang)
   */
  organization_name: string;
  /**
   * Tên sản phẩm
   */
  product_name: string;
  /**
   * Hình ảnh sản phẩm
   */
  product_image: number | Media;
  /**
   * Giá sản phẩm (VND)
   */
  price: number;
  /**
   * Mô tả chi tiết sản phẩm (tùy chọn)
   */
  description?: string | null;
  /**
   * Trạng thái sản phẩm
   */
  status: 'available' | 'out_of_stock' | 'discontinued';
  updatedAt: string;
  createdAt: string;
}
/**
 * Static pages with editable table content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * The title of the page
   */
  title: string;
  /**
   * URL-friendly version of the title. Auto-generated from title but can be edited manually.
   */
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Meta title for SEO purposes
   */
  meta_title?: string | null;
  /**
   * Brief description for SEO purposes
   */
  meta_description?: string | null;
  /**
   * Image for social media sharing
   */
  meta_image?: (number | null) | Media;
  /**
   * Current status of the page
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Editable table content with column grouping - can be imported from CSV or edited directly
   */
  content?: {
    /**
     * Column groups for organizing table structure
     */
    groups?:
      | {
          /**
           * Unique identifier for the group
           */
          group_id: string;
          /**
           * Display name for the group
           */
          group_name: string;
          /**
           * Optional description of the group
           */
          group_description?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Table column headers with grouping
     */
    headers?:
      | {
          /**
           * Column header text
           */
          header: string;
          /**
           * Group this column belongs to
           */
          group_id: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Table data rows
     */
    rows?:
      | {
          /**
           * Row data (pipe-separated values)
           */
          row: string;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Partner organizations and collaborations
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners".
 */
export interface Partner {
  id: number;
  /**
   * The name of the partner organization
   */
  name: string;
  /**
   * Partner logo image
   */
  logo: number | Media;
  /**
   * Partner website URL (optional)
   */
  website?: string | null;
  /**
   * Brief description of the partner (optional)
   */
  description?: string | null;
  /**
   * Partner status
   */
  status: 'active' | 'inactive';
  /**
   * Category of the partner organization
   */
  category: 'strategic' | 'key' | 'education' | 'tourism-hospitality';
  /**
   * User who created this partner entry
   */
  createdBy?: (number | null) | User;
  /**
   * Feature this partner on the website
   */
  featured?: boolean | null;
  /**
   * URL-friendly version of the partner name. Auto-generated from name but can be edited manually.
   */
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Create YouTube embeds that can be inserted into blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "youtube-embeds".
 */
export interface YoutubeEmbed {
  id: number;
  /**
   * Title for this YouTube embed (for identification in the admin)
   */
  title: string;
  /**
   * YouTube video ID (e.g., "dQw4w9WgXcQ" from https://www.youtube.com/watch?v=dQw4w9WgXcQ)
   */
  videoId: string;
  /**
   * Optional title to display above the video
   */
  videoTitle?: string | null;
  /**
   * Optional description for internal use
   */
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'booking-forms';
        value: number | BookingForm;
      } | null)
    | ({
        relationTo: 'contact-forms';
        value: number | ContactForm;
      } | null)
    | ({
        relationTo: 'donation-forms';
        value: number | DonationForm;
      } | null)
    | ({
        relationTo: 'hero-banners';
        value: number | HeroBanner;
      } | null)
    | ({
        relationTo: 'in-kind-support-forms';
        value: number | InKindSupportForm;
      } | null)
    | ({
        relationTo: 'job-posts';
        value: number | JobPost;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'merchandise';
        value: number | Merchandise;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'partners';
        value: number | Partner;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'youtube-embeds';
        value: number | YoutubeEmbed;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  author?: T;
  category?: T;
  status?: T;
  header_image?: T;
  paragraph?: T;
  gallery?:
    | T
    | {
        images?:
          | T
          | {
              image?: T;
              caption?: T;
              alt?: T;
              id?: T;
            };
        layout?: T;
        columns?: T;
        showCaptions?: T;
        enableLightbox?: T;
        id?: T;
      };
  upload_date?: T;
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  meta_description?: T;
  meta_title?: T;
  featured?: T;
  tags?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "booking-forms_select".
 */
export interface BookingFormsSelect<T extends boolean = true> {
  fullName?: T;
  email?: T;
  phoneNumber?: T;
  nationality?: T;
  restaurant?: T;
  reservationDate?: T;
  reservationTime?: T;
  numberOfGuests?: T;
  specialOccasion?: T;
  specialOccasionType?: T;
  specialRequests?: T;
  status?: T;
  confirmationNumber?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-forms_select".
 */
export interface ContactFormsSelect<T extends boolean = true> {
  fullName?: T;
  email?: T;
  message?: T;
  status?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "donation-forms_select".
 */
export interface DonationFormsSelect<T extends boolean = true> {
  fullName?: T;
  email?: T;
  donationAmount?: T;
  paymentMethod?: T;
  howDidYouHearAboutUs?: T;
  status?: T;
  transactionId?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero-banners_select".
 */
export interface HeroBannersSelect<T extends boolean = true> {
  title?: T;
  tagline?: T;
  description?: T;
  button?: T;
  buttonLink?: T;
  image?: T;
  status?: T;
  createdBy?: T;
  featured?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "in-kind-support-forms_select".
 */
export interface InKindSupportFormsSelect<T extends boolean = true> {
  fullName?: T;
  email?: T;
  phoneNumber?: T;
  deliveryPreference?: T;
  message?: T;
  status?: T;
  itemType?: T;
  estimatedValue?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-posts_select".
 */
export interface JobPostsSelect<T extends boolean = true> {
  title?: T;
  location?: T;
  summary?: T;
  description?: T;
  publishedAt?: T;
  status?: T;
  header_image?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  uploadedBy?: T;
  category?: T;
  isPublic?: T;
  folder?: T;
  folders_id?: T;
  metadata_photographer?: T;
  metadata_copyright?: T;
  metadata_license?: T;
  sizes_hero_url?: T;
  sizes_hero_width?: T;
  sizes_hero_height?: T;
  sizes_hero_mime_type?: T;
  sizes_hero_filesize?: T;
  sizes_hero_filename?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merchandise_select".
 */
export interface MerchandiseSelect<T extends boolean = true> {
  organization_name?: T;
  product_name?: T;
  product_image?: T;
  price?: T;
  description?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  meta_title?: T;
  meta_description?: T;
  meta_image?: T;
  status?: T;
  content?:
    | T
    | {
        groups?:
          | T
          | {
              group_id?: T;
              group_name?: T;
              group_description?: T;
              id?: T;
            };
        headers?:
          | T
          | {
              header?: T;
              group_id?: T;
              id?: T;
            };
        rows?:
          | T
          | {
              row?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners_select".
 */
export interface PartnersSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  website?: T;
  description?: T;
  status?: T;
  category?: T;
  createdBy?: T;
  featured?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  active?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "youtube-embeds_select".
 */
export interface YoutubeEmbedsSelect<T extends boolean = true> {
  title?: T;
  videoId?: T;
  videoTitle?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}